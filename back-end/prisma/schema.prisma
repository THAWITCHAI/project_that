// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cars {
  id        Int       @id @default(autoincrement())
  brand     String
  model     String
  useCar    Int       @default(0)
  seat      Int
  color     String
  license   String
  price     Float
  statusId  Int
  image     String
  status    Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  typeId    Int
  type      Type      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cars      Cars[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Type {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cars      Cars[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  nick_name    String
  email        String    @unique
  password     String
  phone        String    @unique
  profileImage String
  roleId       Int
  role         Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]
}

model Booking {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId         Int
  car           Cars     @relation(fields: [carId], references: [id], onDelete: Cascade)
  dateStarted   String
  dateEnded     String
  notes         String?
  nameLocations String
  driverImage   String
  road          String
  alleys        String
  subdistrict   String
  district      String
  province      String
  zipCode       String
  orderId       String   @unique
  orderName     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
